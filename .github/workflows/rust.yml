curl https://sh.rustup.rs -sSf | sh
./scripts/init.sh
./scripts/build.sh
cargo build
cargo run -- --gh repo clone akropolisio/akropolisOS
cargo run -- --akro--validator
cargo run -- \
  --base-path /tmp/bob \
  --bootnodes /ip4/127.0.0.1/tcp/30333/p2p/QmQZ8TjTqeDj3ciwr93EJ95hxfDsb9pEYDizUAbWpigtQN \
  --chain=local \
  --bob \
  --port 30334 \
  --telemetry-url ws://telemetry.polkadot.io:1024 \
  --validator
  Address of liquidity token (LToken.address)
 Pool
Deploy proxy and contract instance
Call initialize()
Liquidity token
Register in pool: Pool.set("ltoken", LToken.address)
PToken
Deploy proxy and contract instance
Call initialize(Pool.address)
Register in pool: Pool.set("ptoken", PToken.address)
CurveModule
Deploy proxy and contract instance
Call initialize(Pool.address)
Register in pool: Pool.set("curve", CurveModule.address)
AccessModule
Deploy proxy and contract instance
Call initialize(Pool.address)
Register in pool: Pool.set("access", CurveModule.address)
LiquidityModule
Deploy proxy and contract instance
Call initialize(Pool.address)
Register in pool: Pool.set("liquidity", LiquidityModule.address)
LoanModule, LoanLimitsModule, LoanProposalsModule
Deploy proxy and contract instance of LoanLimitsModule
Call LoanLimitsModule.initialize(Pool.address)
Register in pool: Pool.set("loan_limits", LoanLimitsModule.address)
Deploy proxy and contract instance of LoanProposalsModule
Call LoanProposalsModule.initialize(Pool.address)
Register in pool: Pool.set("loan_proposals", LoanProposalsModule.address)
Deploy proxy and contract instance of LoanModule
Call LoanModule.initialize(Pool.address)
Register in pool: Pool.set("loan", LoanModule.address)
FundsModule
Deploy proxy and contract instance
Call initialize(Pool.address)
Register in pool: Pool.set("funds", FundsModule.address)
Add LiquidityModule as FundsOperator: FundsModule.addFundsOperator(LiquidityModule.address)
Add LoanModule as FundsOperator: FundsModule.addFundsOperator(LoanModule.address)
Add FundsModule as a Minter for PToken: PToken.addMinter(FundsModule.address)
Liquidity
name: nomolos

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
{
    "Count": "u64",
    "DaoId": "u64",
    "MemberId": "u64",
    "ProposalId": "u64",
    "TokenBalance": "u128",
    "VotesCount": "MemberId",
    "TokenId": "u32",
    "Days": "u32",
    "Rate": "u32",
    "Dao": {
      "address": "AccountId",
      "name": "Text",
      "description": "Bytes",
      "founder": "AccountId"
    },
    "Action": {
      "_enum": {
        "EmptyAction": null,
        "AddMember": "AccountId",
        "RemoveMember": "AccountId",
        "GetLoan": "(Vec<u8>, Days, Rate, Balance)",
        "Withdraw": "(AccountId, Balance, Vec<u8>)",
        "ChangeTimeout": "(DaoId, BlockNumber)",
        "ChangeMaximumNumberOfMembers": "(DaoId, MemberId)"
      }
    },
    "Proposal": {
      "dao_id": "DaoId",
      "action": "Action",
      "open": "bool",
      "accepted": "bool",
      "voting_deadline": "BlockNumber",
      "yes_count": "VotesCount",
      "no_count": "VotesCount"
    },
    "Token": {
      "token_id": "u32",
      "decimals": "u16",
      "symbol": "Vec<u8>"
    },
    "Limits": {
      "max_tx_value": "u128",
      "day_max_limit": "u128",
      "day_max_limit_for_one_address": "u128",
      "max_pending_tx_limit": "u128",
      "min_tx_value": "u128"
    },
    "Status": {
        "_enum":[
          "Revoked",
          "Pending",
          "PauseTheBridge",
          "ResumeTheBridge",
          "UpdateValidatorSet",
          "UpdateLimits",
          "Deposit",
          "Withdraw",
          "Approved",
          "Canceled",
          "Confirmed"
        ]
    },
    "Kind" :{
      "_enum":[
      "Transfer",
      "Limits",
      "Validator",
      "Bridge"
      ]
    },
      "TransferMessage": {
        "message_id": "H256",
        "eth_address": "H160",
        "substrate_address": "AccountId",
        "amount": "TokenBalance",
        "status": "Status",
        "direction": "Status"
    },
      "LimitMessage": {
        "id": "H256",
        "limits": "Limits",
        "status": "Status"
    },
      "BridgeMessage": {
        "message_id": "H256",
        "account": "AccountId",
        "status": "Status",
        "action": "Status"
    },
      "ValidatorMessage": {
        "message_id": "H256",
        "quorum":"u64",
        "accounts": "Vec<AccountId>",
        "status": "Status",
        "action": "Status"
    },
    "BridgeTransfer": {
      "transfer_id": "ProposalId",
      "message_id": "H256",
      "open": "bool",
      "votes": "MemberId",
      "kind": "Kind"
    }
  }
